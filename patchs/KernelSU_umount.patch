KernelSU: support umount modules for Non-GKI kernel
Tom Second 's method
--- a/KernelSU/kernel/core_hook.c	2023-11-20 16:15:20.950130000 +0800
+++ b/KernelSU/kernel/core_hook.c	2023-11-20 20:40:17.052177835 +0800
@@ -489,14 +489,10 @@
 
 static void ksu_umount_mnt(struct path *path, int flags)
 {
-#if LINUX_VERSION_CODE >= KERNEL_VERSION(5, 9, 0)
 	int err = path_umount(path, flags);
 	if (err) {
 		pr_info("umount %s failed: %d\n", path->dentry->d_iname, err);
 	}
-#else
-	// TODO: umount for non GKI kernel
-#endif
 }
 
 static void try_umount(const char *mnt, bool check_mnt, int flags)

--- a/fs/namespace.c	2023-11-20 15:28:32.482832195 +0800
+++ b/fs/namespace.c	2023-11-20 20:36:43.762452629 +0800
@@ -1635,6 +1635,38 @@
 #endif
 	return capable(CAP_SYS_ADMIN);
 }
+static int can_umount(const struct path *path, int flags)
+{
+	struct mount *mnt = real_mount(path->mnt);
+
+	if (!may_mount())
+		return -EPERM;
+	if (path->dentry != path->mnt->mnt_root)
+		return -EINVAL;
+	if (!check_mnt(mnt))
+		return -EINVAL;
+	if (mnt->mnt.mnt_flags & MNT_LOCKED) /* Check optimistically */
+		return -EINVAL;
+	if (flags & MNT_FORCE && !capable(CAP_SYS_ADMIN))
+		return -EPERM;
+	return 0;
+}
+
+// caller is responsible for flags being sane
+int path_umount(struct path *path, int flags)
+{
+	struct mount *mnt = real_mount(path->mnt);
+	int ret;
+
+	ret = can_umount(path, flags);
+	if (!ret)
+		ret = do_umount(mnt, flags);
+
+	/* we mustn't call path_put() as that would clear mnt_expiry_mark */
+	dput(path->dentry);
+	mntput_no_expire(mnt);
+	return ret;
+}
 
 /*
  * Now umount can handle mount points as well as block devices.

